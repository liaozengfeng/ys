<?php
namespace app\api\controller;
use think\Controller;
use app\api\controller\CheckToken as checkToken;
use think\Db;
use app\api\model\Koudai as KdF;
use think\Exception;
use wxpay\example\WxPayConfig;
use wxpay\lib\WxPayApi;
use wxpay\lib\WxPayException;
use wxpay\lib\WxPayUnifiedOrder;

class Koudai extends Controller
{
    private $uid;
    protected $err =[
        'code'=>1,
        'msg'=>'SUCCESS',
        'data'=>[]
    ];
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->uid = input('uid');
        $token = input('token');
        $user = new checkToken($this->uid, $token);
        $isCheck = $user->check();
        if(!$isCheck){
            $data = [
                'code' => 404,
                'data' => [],
                'msg' => "请您先登录！"
            ];
            json($data)->send();exit;
        }
    }

    /**
     * 口袋英语全部分类
     * @return \think\response\Json
     */
    public function getKoudaiCat()
    {
        header("Content-type:text/html;charset=utf-8");
        $uid = input('uid');
        $token = input('token');
        $user =  new checkToken($uid,$token);
        $isCheck= $user->check();
        if($isCheck){

            $cat_datas = Db::table('s_koudai_cat')->select();
            $catShop_datas = Db::table('s_koudai_cat_shop')->where(array('uid'=>$uid,'status'=>1))->select();


            foreach ($cat_datas as $key => $value)
            {
                foreach ($catShop_datas as $ke => $v)
                {
                    if($v['koudai_cat_id']==$value['id']){
                       $cat_datas[$key]['isShop']=1;
                    }
                }
            }


            $data=resortTree($cat_datas);
            if($data){
                $code = 200;
                $msg = "success";
            }else{
                $code = 404;
                $msg = "Invaild Id";
            }
            $data = [
                'code' => $code,
                'data' => $data,
                'cover' => Db::table('s_service')->where('id',3)->value('cover'),
                'msg' =>  $msg
            ];
        }else{
            $data = [
                'code' => 404,
                'data' => [],
                'msg' =>  "请您先登录！"
            ];
        }
        return json($data);

    }

    /**
     * 开放视频字幕文件
     */
    public function getZimu()
    {
        $dataId = input('dataId');
        $res=Db::table('s_koudai')->field('koudai_id,koudai_zimu')->where('koudai_id',$dataId)->find();

        if (!$res || empty($res)) {
            $data = array(
                'code' => 200,
                'data' => [],
                'msg' => "No Data"
            );
        } else {

            $zimu=file_get_contents('.'.$res['koudai_zimu']);

//            $str =iconv("UTF-16LE", "utf-8//IGNORE",$zimu);
            $str =iconv("UTF-8", "utf-8//IGNORE",$zimu);

            $data = array(
                'code' => 200,
                'data' => $str,
                'msg' => "success"
            );

        }
        return json($data);
        //return json(['code'=>3]);
    }

    /**
     * 单个分类的全部视频
     */
    public function getKoudaiCatVideos()
    {
        header("Content-type:text/html;charset=utf-8");
        $catId=input('catId');
        $uid = input('uid');
        $token = input('token');
        $user =  new checkToken($uid,$token);
        $isCheck= $user->check();
        if($isCheck){
            $isShop=Db::table('s_koudai_cat_shop')->where(array('uid'=>$uid,'koudai_cat_id'=>$catId))->find();
            if(!$isShop['status']==1){
                $to_data = [
                    'code' => 500,
                    'data' => [],
                    'msg' =>  "亲，您还未购买哦！"
                ];
            }else{

                $pData=Db::table('s_koudai_cat')->where('id',$catId)->field('id,catName,pid')->find();

                if($pData['pid']==0){
                    $p_data=array(
                        'pid'=>0,
                        'pName'=>'',
                        'nowId'=>$catId,
                        'nowName'=>$pData['catName']
                    );

                }else{
                    $re=Db::table('s_koudai_cat')->where('id',$pData['pid'])->field('id,catName,pid')->find();
                    $p_data=array(
                        'pid'=>$pData['pid'],
                        'pName'=>$re['catName'],
                        'nowId'=>$catId,
                        'nowName'=>$pData['catName']
                    );
                }

                $where['k.delete_time']=0;
                $where['kc.delete_time']=0;
                $where['kc.status']=1;
                $where['kcs.uid']=$uid;
                $where['kcs.delete_time']=0;
                $where['kcs.status']=1;
                $where['kcs.koudai_cat_id']=$catId;

               $data = Db::table('s_koudai')
                   ->alias('k')
                   ->join('s_koudai_cat kc','k.koudai_cat_id=kc.id')
                   ->join('s_koudai_cat_shop kcs','kc.id=kcs.koudai_cat_id')
                   ->join('s_user_study us','us.course_id=k.koudai_id and type=2 and us.uid='.$uid,"LEFT")
                   ->field('k.*,us.id isStudy')
                   ->where($where)
                   ->select();

               /*$data = KdF::with(['user'=>function($query){
                   $query->where('uid',$this->uid);
               }])->where('koudai_cat_id',$catId)
                   ->select();*/


                if($data){

                    $code = 200;
                    $msg = "success";
                }else{
                    $code = 404;
                    $msg = "该分类视频正在添加中……";
                }
                $to_data = [
                    'code' => $code,
                    'data' => $data,
                    'msg' =>  $msg,
                    'pData'=>$p_data
                ];
            }

        }else{
            $to_data = [
                'code' => 404,
                'data' => [],
                'msg' =>  "请您先登录！"
            ];
        }
        return json($to_data);

    }

    /**
     * 口袋英语单个视频信息
     */
    public function getKoudaiVideosInfo()
    {
        header("Content-type:text/html;charset=utf-8");
        $dataId=input('dataId');
        $uid = input('uid');
        $token = input('token');
        $user =  new checkToken($uid,$token);
        $isCheck= $user->check();

        if($isCheck){

            /*$find=Db::table('s_koudai')
                ->alias('k')
                ->join('s_koudai_cat_shop kcs','k.koudai_cat_id=kcs.koudai_cat_id','LEFT')
                ->field('k.*,kcs.status as isShop')
                ->where(array('kcs.uid'=>$uid,'k.koudai_id'=>$dataId,'kcs.status'=>1))
                ->find();*/
            $info = KdF::withCount('study')
                ->with(['user'=>function($query){
                    $query->where('uid',$this->uid);
                }])
                ->where('koudai_id',$dataId)
                ->field("koudai_study,koudai_collection",true)
                ->find();

            if($info){

                /*$findCollect=Db::table('s_koudai_user')
                    ->where(array('uid'=>$uid,'koudai_id'=>$dataId,'status'=>1))
                    ->find();
                if($findCollect){
                    $find['isCollect']=1;
                }else{
                    $find['isCollect']=0;
                }*/

                $to_data = [
                    'code' => 200,
                    'data' => $info,
                    'msg' =>  "success",
                ];

            }else{
                $to_data = [
                    'code' => 500,
                    'data' => [],
                    'msg' =>  "亲，您还未购买哦！"
                ];
            }

        }else{
            $to_data = [
                'code' => 404,
                'data' => [],
                'msg' =>  "请您先登录！"
            ];
        }
        return json($to_data);

    }


    /**
     * 口袋英语转发
     * 转发视频id  $dataId
     */

    public function sendKoudaiForward()
    {
        header("Content-type:text/html;charset=utf-8");
        $dataId = input('dataId');
        $uid = input('uid');
        $token = input('token');
        $user =  new checkToken($uid,$token);
        $isCheck= $user->check();
        if($isCheck){
            $ModelMove=new KdF();
            $ModelMove->updateForward($dataId);
            $re=Db::table('s_koudai')->field('koudai_id,koudai_study,koudai_collection,koudai_play,koudai_forward')->where(array('koudai_id'=>$dataId))->find();
            $res=array(
                'collection'=>$re['koudai_collection'],
                'forward'=>$re['koudai_forward'],
                'play'=>$re['koudai_play'],
                'koudai_id'=>$re['koudai_id'],
                'koudai_study'=>$re['koudai_study']
            );
            $to_data = array(
                'code' => 200,
                'data' => $res,
                'msg' => "success"
            );

        }else{
            $to_data = [
                'code' => 404,
                'data' => [],
                'msg' =>  "请您先登录！"
            ];
        }
        return json($to_data);
    }


    /**
     * 视频收藏与取消
     * @return \think\response\Json
     */
    public function sendkoudaiCollection()
    {
        $dataId = input('dataId');
        $uid = input('uid');
        $token = input('token');
        $user = new checkToken($uid, $token);
        $tag=input('isCollect');//1,0
        $isCheck = $user->check();

        if ($isCheck) {
            if($tag==1){ //用户已收藏,执行收藏取消
                $ModelMove=new KdF();
                $ModelMove->delCollection($dataId);
                Db::table('s_collect')->where(array('uid'=>$uid,'course_id'=>$dataId))->delete();
                $re=Db::table('s_koudai')->field('koudai_collection,koudai_play,koudai_forward')->where(array('koudai_id'=>$dataId))->find();
                $data = array(
                    'code' => 200,
                    'data' => [
                        'collection'=>$re['koudai_collection'],
                        'forward'=>$re['koudai_forward'],
                        'play'=>$re['koudai_play'],
                        'dataId'=>$dataId
                    ],
                    'msg' => "已取消收藏",
                );

            }else{//用户未收藏,执行收藏

                $ModelMove=new KdF();
                $ModelMove->updateCollection($dataId);
                Db::table('s_collect')->insert(['course_id'=>$dataId,'uid'=>$uid,'type'=>2,'create_time'=>time()]);
                $re=Db::table('s_koudai')->field('koudai_collection,koudai_play,koudai_forward')->where(array('koudai_id'=>$dataId))->find();
                $data = array(
                    'code' => 200,
                    'data' => [
                        'collection'=>$re['koudai_collection'],
                        'forward'=>$re['koudai_forward'],
                        'play'=>$re['koudai_play'],
                        'dataId'=>$dataId
                    ],
                    'msg' => "收藏成功"
                );

            }

        } else {
            $data = [
                'code' => 404,
                'data' => [],
                'msg' => "请您先登录！"
            ];
        }
        return json($data);
    }


    /*
     * 口袋视频播放量增加
     * koudai_id        口袋视频id
     * */
    public function incKoudaiStudy(){
        $koudai_id = input("koudai_id",0);
        if(!$koudai_id){
            $data = [
                'code' => 1,
                'data' => [],
                'msg' => "无效参数！"
            ];
            return json($data);
        }
        Db::table('s_koudai')->where('koudai_id',$koudai_id)->setInc("koudai_play");

        $data = [
            'code' => 200,
            'data' => [],
            'msg' => "SUCCESS"
        ];
        return json($data);

    }

    /*
     * 口袋视频学习记录
     * koudai_id    口袋视频id
     * */
    public function koudaiUser(){
        $koudai_id = input("koudai_id",0);
        if(!$koudai_id){
            $data = [
                'code' => 1,
                'data' => [],
                'msg' => "无效参数！"
            ];
            return json($data);
        }
        $data = [
            'code' => 200,
            'data' => [],
            'msg' => "SUCCESS"
        ];
        return json($data);
    }

    /**
     * 口袋英语购买界面信息
     */

    public function getShoppingInfo()
    {
        header("Content-type:text/html;charset=utf-8");
        $catId=input('catId');
        $uid = input('uid');
        $token = input('token');
        $user =  new checkToken($uid,$token);
        $isCheck= $user->check();
        if($isCheck){
            $re=Db::table('s_koudai_cat')->field('catName,des_thunbmail,teacher_thunbmail,catPrice,description')->where(array('id'=>$catId))->find();
            $to_data = [
                'code' => 200,
                'data' => $re,
                'msg' =>  "success"
            ];
        }else{
            $to_data = [
                'code' => 404,
                'data' => [],
                'msg' =>  "请您先登录！"
            ];
        }

        return json($to_data);
    }


   /*
    * 微信支付
    * koudai_cat_id     口袋英语分类id
    * */
   public function pay(){
       try{
           $koudai_cat_id = input("koudai_cat_id",0);
           $koudai_cat = Db::table("s_koudai_cat")->find($koudai_cat_id);
           if(!$koudai_cat_id || !$koudai_cat){
               throw new WxPayException('无效参数！');
           }
           if(!$koudai_cat['pid']){
               throw new WxPayException('参数错误！');
           }
           //判断分类是否已购买
           $info = Db::table('s_koudai_cat_shop')->where('koudai_cat_id',$koudai_cat_id)->where('uid',$this->uid)->find();
           if($info){
               throw new WxPayException('您已购买过相同产品！');
           }
           $nt = time();
           $data = [
               'order_no'=>date("YmdHis").rand(10000,99999),
               'koudai_cat_id'=>$koudai_cat_id,
               'user_id'=>$this->uid,
               'money'=>$koudai_cat['catPrice'],
               'create_time'=>$nt,
           ];
           Db::table("s_koudai_shopping")->insert($data);
           $openId = Db::table('s_user')->where('uid',$this->uid)->value('openId');
           //②、统一下单
           $input = new WxPayUnifiedOrder();
           $input->SetBody('山姆英语-视频课程');
           //$input->SetAttach("test");//附加数据，在查询API和支付通知中原样返回，可作为自定义参数使用。
           $input->SetOut_trade_no($data['order_no']);
           $input->SetTotal_fee($data['money']*100);
           //$input->SetTime_start(date("YmdHis"));//订单生成时间
           //$input->SetTime_expire(date("YmdHis", time() + 600));//订单失效时间
           //$input->SetGoods_tag("test");//订单优惠标记，使用代金券或立减优惠功能时需要的参数
           //$input->SetNotify_url(url("api/Pay/notify",[],true,true));
           $input->SetNotify_url("http://xyy.a.haoyangsoft.com/api/Pay/notify");
           $input->SetTrade_type("JSAPI");
           $input->SetOpenid($openId);
           $config = new WxPayConfig();
           //获得预支付交易会话标识
           $res = WxPayApi::unifiedOrder($config, $input);

           if($res['return_code']=='SUCCESS' && $res['result_code']=='SUCCESS'){
               $prepay_id=$res['prepay_id'];
               //组装签名数据
               $data=[
                   'timeStamp'=>"$nt",
                   'nonceStr'=>WxPayApi::getNonceStr(),
                   'signType'=>$config->GetSignType(),
                   'package'=>'prepay_id='.$prepay_id,
               ];
               $str='appId='.$config->GetAppId().'&nonceStr='.$data['nonceStr'].'&package='.$data['package'].'&signType='.$data['signType'].'&timeStamp='.$data['timeStamp'].'&key='.$config->getKey();
               $data['paySign']=md5($str);
               //组装支付所需数据
               $this->err['data']=$data;
               $this->err['code']=200;
           }elseif($res['return_code']=='SUCCESS'){
               throw new WxPayException($res['err_code_des']);
           }else{
               throw new WxPayException($res['return_msg']);
           }

       }catch (WxPayException $e){
           $this->err['msg'] = $e->getMessage();
       }

       return json($this->err);
   }

   /*
    *   词汇练习
    *   type    类型：1词汇练习，2视频练习，3口袋英语,4测试1,5测试2。默认1
    *   id      视频id或口袋英语id
    *
    * */
   public function exam(){
       $type = input("type",1);
       if($type == 1){
           //获取词汇练习
           $cihui_id = Db::table("s_exam")->where("uid",$this->uid)->where("type",$type)->column('cihui_id');
           $success_count = count($cihui_id);
           $total =  Db::table("s_cihui")->where("move_id",0)->where("koudai_id",0)->count();
           if($success_count){
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",1)
                   ->whereNotIn("cihui_id",$cihui_id)
                   ->order('cihui_id')->find();
           }else{
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",1)
                   ->order('cihui_id')->find();
           }
           $this->err['data']=[
               'total'=>$total,
               'success_count'=>$success_count
           ];
           if(!$data){
               $this->err['code'] = 2;
               $this->err['msg'] = '恭喜您，所有题目已答完！';
           }else{
               $this->err['code'] = 200;
               $data['allAnswer'] = unserialize( $data['allAnswer']);
               $this->err['data']['data'] = $data;
           }
       }elseif($type == 2){
           //获取视频练习
           $move_id = input("id",0);

           $info = Db::table('s_user_study')->where('course_id',$move_id)->where('uid',$this->uid)->where('type',1)->find();
           if(!$info){
               Db::table('s_user_study')->insert(['course_id'=>$move_id,'uid'=>$this->uid,'create_time'=>time()]);
           }

           if(!$move_id){
               $this->err['msg'] = '无效参数！';
               return json($this->err);
           }
           $cihui_ids =  Db::table("s_cihui")
               ->where("move_id",$move_id)
               ->column('cihui_id');
           $cihui_id = Db::table("s_exam")
               ->where("uid",$this->uid)
               ->where("type",$type)
               ->whereIn("cihui_id",$cihui_ids)
               ->column('cihui_id');
           $success_count = count($cihui_id);
           $total =  count($cihui_ids);
           if($success_count){
               $data =  Db::table("s_cihui")
                   ->where("move_id",$move_id)
                   ->whereNotIn("cihui_id",$cihui_id)
                   ->order('cihui_id')->find();
           }else{
               $data =  Db::table("s_cihui")
                   ->where("move_id",$move_id)
                   ->order('cihui_id')->find();
           }
           $this->err['data']=[
               'total'=>$total,
               'success_count'=>$success_count
           ];
           if(!$data){
               $this->err['code'] = 2;
               $this->err['msg'] = '恭喜您，所有题目已答完！';
           }else{
               $this->err['code'] = 200;
               $data['allAnswer'] = unserialize( $data['allAnswer']);
               $this->err['data']['data'] = $data;
           }
       }elseif($type == 3){
            //获取视频练习
           $koudai_id = input("id",0);
           $info = Db::table('s_user_study')->where('course_id',$koudai_id)->where('uid',$this->uid)->where('type',2)->find();
           if(!$info){
               Db::table('s_user_study')->insert(['course_id'=>$koudai_id,'uid'=>$this->uid,'type'=>2,'create_time'=>time()]);
           }
           if(!$koudai_id){
               $this->err['msg'] = '无效参数！';
               return json($this->err);
           }
           $cihui_ids =  Db::table("s_cihui")
               ->where("koudai_id",$koudai_id)
               ->column('cihui_id');
           $cihui_id = Db::table("s_exam")
               ->where("uid",$this->uid)
               ->where("type",$type)
               ->whereIn("cihui_id",$cihui_ids)
               ->column('cihui_id');
           $success_count = count($cihui_id);
           $total =  count($cihui_ids);
           if($success_count){
               $data =  Db::table("s_cihui")
                   ->where("koudai_id",$koudai_id)
                   ->whereNotIn("cihui_id",$cihui_id)
                   ->order('cihui_id')->find();
           }else{
               $data =  Db::table("s_cihui")
                   ->where("koudai_id",$koudai_id)
                   ->order('cihui_id')->find();
           }
           $this->err['data']=[
               'total'=>$total,
               'success_count'=>$success_count
           ];
           if(!$data){
               $this->err['code'] = 2;
               $this->err['msg'] = '恭喜您，所有题目已答完！';
           }else{
               $this->err['code'] = 200;
               $data['allAnswer'] = unserialize( $data['allAnswer']);
               $this->err['data']['data'] = $data;
           }
       }elseif($type == 4){
           //获取词汇练习
           $cihui_id = Db::table("s_exam")->where("uid",$this->uid)->where("type",$type)->column('cihui_id');
           $success_count = count($cihui_id);
           $total =  Db::table("s_cihui")->where("move_id",0)->where("koudai_id",0)->count();
           if($success_count){
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",2)
                   ->whereNotIn("cihui_id",$cihui_id)
                   ->order('cihui_id')->find();
           }else{
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",2)
                   ->order('cihui_id')->find();
           }
           $this->err['data']=[
               'total'=>$total,
               'success_count'=>$success_count
           ];
           if(!$data){
               $this->err['code'] = 2;
               $this->err['msg'] = '恭喜您，所有题目已答完！';
           }else{
               $this->err['code'] = 200;
               $data['allAnswer'] = unserialize( $data['allAnswer']);
               $this->err['data']['data'] = $data;
           }
       }elseif($type == 5){
           //获取词汇练习
           $cihui_id = Db::table("s_exam")->where("uid",$this->uid)->where("type",$type)->column('cihui_id');
           $success_count = count($cihui_id);
           $total =  Db::table("s_cihui")->where("move_id",0)->where("koudai_id",0)->count();
           if($success_count){
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",3)
                   ->whereNotIn("cihui_id",$cihui_id)
                   ->order('cihui_id')->find();
           }else{
               $data =  Db::table("s_cihui")
                   ->where("move_id",0)
                   ->where("koudai_id",0)
                   ->where("classify",3)
                   ->order('cihui_id')->find();
           }
           $this->err['data']=[
               'total'=>$total,
               'success_count'=>$success_count
           ];
           if(!$data){
               $this->err['code'] = 2;
               $this->err['msg'] = '恭喜您，所有题目已答完！';
           }else{
               $this->err['code'] = 200;
               $data['allAnswer'] = unserialize( $data['allAnswer']);
               $this->err['data']['data'] = $data;
           }
       }


       return json($this->err);
   }

   /*
    * 提交答案
    * cihui_id      试题id
    * status        状态：0回答错误,1回答正确。默认1
    * */
   public function submitAnswer(){
       $cihui_id = input("cihui_id",0);
       $status = input("status",1);
       try{
           $cihui = Db::table('s_cihui')->find($cihui_id);
           if(!$cihui){
               throw new Exception('无效参数！');
           }
           $info = Db::table("s_exam")->where("uid",$this->uid)->where("cihui_id",$cihui_id)->value('cihui_id');
           if($info){
               throw new Exception('重复提交答案！');
           }
           switch ($cihui['classify']){
               case 1:
                   $type = 1;
                   break;
               case 2:
                   $type = 4;
                   break;
               default:
                   $type = 5;
           }
           if($cihui['move_id']){
               $type = 2;
           }
           if($cihui['koudai_id']){
               $type = 3;
           }
           $data = [
               'cihui_id'=>$cihui_id,
               'uid'=>$this->uid,
               'type'=>$type,
               'score'=>$status?$cihui['score']:0,
               'create_time'=>time(),
           ];
           Db::table('s_exam')->insert($data);
           $this->err['code'] = 200;
       }catch (Exception $e){
           $this->err['msg'] = $e->getMessage();
       }
       return json($this->err);
   }

    /*
     *   词汇练习
     *   level    难度等级：1基础，2四级，3六级,4雅思。默认0
     *   time     考试次数  默认0
     *   correct  正确数 默认0
     *
     * */
    public function wordExam(){
        $level = input("level",0);
        $time = input("time",0);
        $correct = input("correct",0);
        $nt = time();
        $pass = 0;
        $config = ['','level_one_num','level_two_num','level_three_num','level_four_num'];
        $score = [0,0,2000,4000,6000];

        //是否有未完成考试
        $exam = Db::table('s_cihui_exam')->where('uid',$this->uid)->where('status',1)->find();
        //验证是否通过
        if($exam){
            if($level && $time){
                $num = $this->getConfig($config[$exam['level']]);
                $result = $correct?intval($correct/$num*100):0;
                $save = ['update_time'=>$nt];
                if($result > 80){
                    $pass = 1;
                    $save['time']= 1;
                    if($level < 4){
                        $save['level']=$level+1;
                    }else{
                        $level = 5;
                        $save['status'] = 0;
                    }
                }else{
                    if($level < 4){
                        if($time == 1){
                            $save['one_score'] = $result;
                            $pass = 1;
                        }else{
                            $save['two_score'] = $result;
                            $save['status'] = 0;
                        }
                        $save['time'] = 2;
                    }else{
                        $save['status'] = 0;
                    }
                }
                Db::table('s_cihui_exam')->where('id',$exam['id'])->update($save);
            }else{
                $pass = 1;
                $level = $exam['level'];
            }
        }else{
            $save = [
                'uid'=>$this->uid,
                'level'=>1,
                'time'=>1,
                'create_time'=>$nt,
                'update_time'=>$nt
            ];
            $exam['id'] = Db::table('s_cihui_exam')->insertGetId($save);
            $level = 1;
            $pass = 1;
        }
        $exam = Db::table('s_cihui_exam')->find($exam['id']);
        $num = $this->getConfig($config[$exam['level']]);
        if($pass && $level < 5){
            //获取词汇练习
            $item = [];
            $items = [];
            $data =  Db::table("s_cihui")->where("move_id",0)
                ->where("koudai_id",0)->where("level",$exam['level'])
                ->column('cihui_id');
            if(count($data) > $num){
                shuffle($data);
                for($i=0;$i<$num;$i++){
                    $item[] = $data[$i];
                }
            }else{
                $item = $data;
            }

            if(count($item)){
                $items = Db::table("s_cihui")->whereIn("cihui_id",$item)->select();
                foreach ($items as &$v){
                    $v['allAnswer'] = unserialize( $v['allAnswer']);
                }
            }

            $this->err['data'] = [
                'level'=>$exam['level'],
                'time'=>$exam['time'],
                'item'=>$items,
                'state'=>1,
            ];

        }else{
            $s = $exam['level'] < 4?2000:6000;
            if($exam['level'] == 4){
                $result = $correct?$correct/$num*$s:0;
            }else{
                $result = intval(($exam['one_score']+$exam['two_score'])/2*$s/100);
            }

            $final_score =  $result+$score[$exam['level']];
            $this->err['data']['final_score'] = $final_score;
            $this->err['data']['level'] = $exam['level'];
            $this->err['data']['state'] = 0;
            $levels = ['intro', 'level1', 'level2', 'level3'];
            $scores = ['1000', '3500', '5000', '7000'];
            $l = 'level4';
            foreach ($scores as $k=>$s){
                if($final_score <= $s){
                    $l = $levels[$k];
                    break;
                }
            }
            $this->err['data']['video_level'] = $l;
        }
        $this->err['code'] = 200;


        return json($this->err);
    }

   /*
    * 成绩统计
    *
    * 0-1000 intro，
    * 1000-3500 level 1，
    * 3500-5000 Level 2，
    * 5-7k level 3，
    * 7k 以上 level 4
    * */
   public function statistics(){
       $levels = ['intro', 'level1', 'level2', 'level3'];
       $scores = ['1000', '3500', '5000', '7000'];
       $score = Db::table("s_exam")
           ->where("uid",$this->uid)
           ->where("type",1)
           ->sum('score');
       $level = 'level4';
       foreach ($scores as $k=>$s){
           if($score <= $s){
               $level = $levels[$k];
               break;
           }
       }
       $this->err['code'] = 200;
       $this->err['data'] = [
           'level'=>$level,
           'score'=>$score,
           'qr'=>Db::table('s_service')->where('id',1)->value('cover'),
           'data'=>Db::table('s_service')->where('id',2)->find()
       ];
       return json($this->err);
   }

   /*
    * 重新练习
    * type      类型：2视频，3口袋英语。默认2
    * id        视频id或口袋英语id
    * */
   public function reexam(){
       $type = input("type",2);
       if($type == 2){
           //获取视频练习
           $move_id = input("id",0);
           if(!$move_id){
               $this->err['msg'] = '无效参数！';
               return json($this->err);
           }
           $cihui_ids =  Db::table("s_cihui")
               ->where("move_id",$move_id)
               ->column('cihui_id');
           Db::table("s_exam")
               ->where("uid",$this->uid)
               ->where("type",$type)
               ->whereIn("cihui_id",$cihui_ids)
               ->delete();
       }elseif($type == 3){
           //获取视频练习
           $koudai_id = input("id",0);
           if(!$koudai_id){
               $this->err['msg'] = '无效参数！';
               return json($this->err);
           }
           $cihui_ids =  Db::table("s_cihui")
               ->where("koudai_id",$koudai_id)
               ->column('cihui_id');
           Db::table("s_exam")
               ->where("uid",$this->uid)
               ->where("type",$type)
               ->whereIn("cihui_id",$cihui_ids)
               ->delete();
       }else{
           Db::table("s_exam")
               ->where("uid",$this->uid)
               ->where("type",$type)
               ->delete();
       }
        $this->err['code'] = 200;

       return json($this->err);
   }

   /*
    * 收藏
    * page
    * limit     默认5
    * type      类型：1视频，2口袋英语
    * */
    public function collect(){
       $limit = input("limit",5);
       $data = Db::table('s_collect')
           ->alias('c')
           ->join('s_move m','m.move_id=c.course_id and type=1','LEFT')
           ->join('s_koudai k','k.koudai_id=c.course_id and type=2','LEFT')
           ->field('m.*,k.*,c.type skip_type')
           ->where('c.uid',$this->uid)
           ->order('c.create_time desc')
           ->paginate($limit);
        $this->err['code'] = 200;
        $this->err['data'] = $data->items();

        return json($this->err);
    }

    /*
    * 学习记录
    * page
    * limit     默认5
    * type      类型：1视频，2口袋英语
    * */
    public function study(){
        $limit = input("limit",5);
        $data = Db::table('s_user_study')
            ->alias('s')
            ->join('s_move m','m.move_id=s.course_id and type=1','LEFT')
            ->join('s_koudai k','k.koudai_id=s.course_id and type=2','LEFT')
            ->field('m.*,k.*,s.type skip_type')
            ->where('s.uid',$this->uid)
            ->order('s.create_time desc')
            ->paginate($limit);

        $this->err['code'] = 200;
        $this->err['data'] = $data->items();

        return json($this->err);
    }

    /*
     * 获取词汇练习配置
     * */
    protected function getConfig($var_name){
        return Db::table('s_exam_config')->where('var_name',$var_name)->value('value');
    }

}
